<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Document</title>
</head>
<body>
	

<?php
error_reporting(E_ALL);
// Конфигурационный файл в директории "php.ini"
	// phpinfo(); // вся информация о php  

// Если после php нет никакого кода, то тек php не закрывается

// *******************************************************************************************************


/*----------Теги----------*/

// Открывающий тег
// <?php

// Сокращенный открывающий тег(short open tag)
// <?

// Закрывающий тег
// ? > (без пробела)

// Вариант кода для php
// <script language="php"> .....</script>

// В конце каждой инструкции обязательно использовать ";"

// Табуляция и пробелы игнорируются php
 

// *******************************************************************************************************


// Команды, чтобы вывести на страницу

// echo "Hello, world!";
// print "Hello, world!";

// echo может принять несколько параметров
// echo "Hello, ", "world!";

// Вывод результата функции
// echo strftime ("%d-%B-%Y, %A");

// *******************************************************************************************************


/*----------Объявление переменных----------*/

// Переменная начинается со знака доллара($)
// Имя переменной должно начинаться с буквы или символа подчеркивания
// Имя переменной чувствительно к регистру
// $x = 10;
?>


<!-- Для php не важно сколько блоков будет, все считается одним кодом -->
<?php
// $name = "John";
// echo $x;
?>

<!-- Если нужно вывести только одну переменную можно использовать сокращение от "echo" - "=" -->
<?//= $name; ?>


<?php 
// Преобразование код
// $name = "John"
// echo iconv("window-1251", "UTF-8", $name);


// *******************************************************************************************************


/*----------Копирование переменных----------*/

// $x = 10;
// $y = $x;
// $y = 20;

// echo $x;//10
// echo $y;//20


/*----------Ссылки----------*/

// $x = 10;
// $y = &$x;
// $y = 20;
// echo $x; //20
// echo $y; //20


/*----------Переменные переменных----------*/

// $x = "name";
// $$x = "Вася";
// echo "Привет, ", $name;// Привет, Вася


// *******************************************************************************************************


//*----------Создание констант----------*/

// В константу значение можно положить только один раз
// В дальнейшем констунту можно только использовать
// Константы регистрозависимые

// Первый параметр - имя константы
// Второй параметр - значение константы
// define("USER_NAME", "Вася");
// echo USER_NAME;

// const TWO_HUNDRED = 200;
// echo TWO_HUNDRED;

// const TWO_HUNDRED_TEN = TWO_HUNDRED + 10;
// echo TWO_HUNDRED_TEN;

// Третьим параметром можно передать "1", чтобы имя не было регистрозависимым

// define("AAa", 100, 1);
// echo AAa;


// *******************************************************************************************************


//*----------Ошибки----------*/

// Уровни ошибок
// 1.E_DEPRECATED
// 2.E_NOTICE
// 3.E_WARNING
// 4.E_PARSE
// 5.E_ERROR(фатальная)

// Каждая ошибка - это встроенная константа
// В файле php.ini есть директивы:
// display_errors = on // выводить или не выводить ошибки
// error_reporting = E_ALL&E_NOTICE

// Функции для включения, отключения, выбора ошибок

// Включить вывод всех ошибок
// error_reporting(E_ALL);

// Отключить вывод всех ошибок
// error_reporting(0);

// Включить определенные уровни ошибок
// error_reporting(E_ERROR | E_WARNING);

?>

<?php
// *******************************************************************************************************


//*----------Типы данных----------*/

// 1. Целые числа(Integer)
// 2. Числа с плавающей точкой(Float)
// 3. Строки (String)
// 4. Булевы значения (Boolean)
// 5. Специальный тип (Null)
// 6. Массив (Array)
// 7. Ресурс (resourse)
// 8. Объект (Object)



// *******************************************************************************************************


//*----------Целые числа----------*/

// $int = 1234; //Десятичное число
// $int = -123; //отрицательное число
// $int = 0123; // Возьмеричное число
// $int = 0x1A; // Шестрадцатеричное число
// $int = 0b11111111; //двоичное число


// *******************************************************************************************************


//*----------Числа с плавающей точкой----------*/

// $float = 1.234;
// $float = 1.2e3;
// $float = 7E-10;

// double!!!!


// *******************************************************************************************************


/*----------Строки----------*/

// echo "это простая строка в двойных кавычках";
// echo 'Это простая строка в апострофах';

// Строка заключенная в двойные кавычки позволяет использовать Esc-последовательности(Обозначения переноса строк и т.д.) и переменных
// Склеивание значения переменной и текста происходит без дополнительных знаков
// $name = "John";
// echo "Hello \$a $name";

// Тег для сохранения форматирования строки
// echo <<< Метка
// 	Hello
// 		$name
// Метка;


//*----------Экранирование переменных----------*/

// $juice = "apple";

// // Проблема
// echo "He drank some $juice juice.";//He drank some apple juice.
// echo "He drank some juice made of $juices.";//He drank some juice made of.

// // Решение
// echo "He drank some juice made of {$juice}s.";//He drank some juice made of apples.


// // Получение первого символа в строке

// $str = 'This is a test.';
// $first = $str{0};//T
// echo $first;
// echo $str[0];

// // Получение третьего символа в строке
// $third = $str{2};//i
// echo $third;


// Получение последнего символа строки
// *Количество символов в php считаются в байтах!!!!!!!

// $name = "John!";
// // Вычисление длины строки
// $len = strlen($name); //5
// // Вычисление позиции символа
// $pos = $len -1;
// echo $name{$pos};// !


// Существует специальное разрешения для работы со строками

// $name = "Вася";
// $len = mb_strlen($name);//4
// echo $len;


// *******************************************************************************************************


/*----------Булевы значения----------*/

// true при приведении к числу приводится к 1
// false при приведении к числу приводится к 0

// true при приведении к строке приводится к 1
// false при приведении к строке приводится к ""

// $x = true;
// echo $x ;


// *******************************************************************************************************


/*----------Специальный тип----------*/

// Первый вариант - переменной не было присвоено значение
// echo $x;

// Второй вариант - переменной было присвоино значение null
// $x = null;
// echo $x;

// Третий вариант - переменной было присвоино значение, но она была удалена
// $x = 10; 
// unset($x);
// echo $x;


// *******************************************************************************************************


/*----------Способы манипуляции типами----------*/

// Проверка типов
// $str = "John";
// $int = 10;
// $bool = true;
// $y = "10 hello";

// Возвращается строка
// echo gettype($str); //string
// echo gettype($int); //integer
// echo gettype($bool); //boolean
// echo gettype($x); // NULL

// Возвращается булев тип
// echo is_string($str); //1
// echo is_integer($int); //1
// echo is_boolean($bool); //1
// echo is_null($x); // ""

// Приведение типов
// echo (int)$y; //10
// echo $y;//10 hello
?>


<?php
// *******************************************************************************************************


/*----------Операторы----------*/

// Арифметические операторы
// 1. -$a  - Отрицание // Смена знака $a
// 2. $a + $b - Сложение 
// 3. $a - $b - Вычитание
// 4. $a * $b - Умножение
// 5. $a / $b - Деление
// 6. $a % $b - Деление по модулю // Целочисленный остаток от деления

// Оператор конкатенации строки
// .

// Операторы обособления
// {}

// Логические операторы
// 1. and - И (низкий приоритет)
// 2. or - или (низкий приоритет)
// 3. xor - Исключающее или (или одно не или другое не)
// 4. ! - Отрицание
// 5. && - И
// 6. || - Или

	// Операторы сравнения
	// 1. ==  оператор сравнения
	// 2. === строгое равно (значение и тип совпадают)
	// 3. != Не равно
	// 4. !== не равно по значению или по типу
	// 5. < Меньше 
	// 6. > Больше
	// 7. <= Меньше или равно
	// 8. >= Больше или равно

// Операторы присваивания
// 1. = Присвоить значение
// 2. ++ оператор инкремента
// 3. -- оператор декремента

// Тернарный оператор
// $something ? "something" : "anything else" //если true то "something", иначе "anything else"

// Управляющие конструкции
// 1. if - оператор условия
// 2. else - усли не if, то else 
// 3. else if - иначе если
// 4. Switch - альтернатива if


// *******************************************************************************************************


// Пример работы арифметических операторов

// $x = "5";
// $y = "gjhj";
// $t = "5hkjh";

// echo $x * 10;//50
// echo $y * 10;//0
// echo $t * 10;//50


// Пример конкатенации строк

// $a = "Hello ";
// $b = $a . "World";
// echo $b;// Hello World


// *******************************************************************************************************


/*----------Постфиксный инкремент----------*/
// Если инкремент стоит после переменной, то он сработает только после выполнения предыдущей операции

// $x = 1;
// echo "Должно быть 1: " . $x++;
// echo "Должно быть 2: " . $x;

/*----------Префиксный инкремент----------*/
// Если инкремент стоит перед переменной, то сначала сработает инкремент, и потом сама операция
// $x = 1;
// echo "Должно быть 2: " . ++$x;
// echo "Должно быть 2: " . $x;


// *******************************************************************************************************


/*----------Управление кодом----------*/

/*----------Оператор if----------*/

// $shop = "0";
// $x = null;

// echo isset($shop); // 1
// // только если переменная - null или значение переменной не определено, тогда isset возвращает false
// echo isset($x); // ""/false

// if(2 + 53){
//  	echo "Иду в магазин<br>";
// 	echo "Покупаю хлеб<br>";
// }

// echo "Иду домой";

// Пример операторов сравнения
// $shop = "open";

// if($shop == "open"){
//  	echo "Иду в магазин<br>";
// 	echo "Покупаю хлеб<br>";
// }

// echo "Иду домой";


// echo 1 == "1"; //1
// echo 1 === "1"; //""/false

// $shop = "open";

// if($shop != "close"){
//  	echo "Иду в магазин<br>";
// 	echo "Покупаю хлеб<br>";
// }

// echo "Иду домой";


// $shop = true;
// $money = true;

// if($shop and $money){
//  	echo "Иду в магазин<br>";
// 	echo "Покупаю хлеб<br>";
// }

// echo "Иду домой";

// $shop = true;
// $money = true;

// if($shop && $money){
//  	echo "Иду в магазин<br>";
// 	echo "Покупаю хлеб<br>";
// }

// echo "Иду домой";


// Альтернатива для открывания условия if

// $shop = true;
// $money = true;

// if($shop and $money):
//  	echo "Иду в магазин<br>";
// 	echo "Покупаю хлеб<br>";
// endif;

// echo "Иду домой";


/*----------Конструкция switch----------*/

// $i = 20;
// switch($i){
// 	case 0: 
// 		echo "Результат: 0"; break;
// 	case 1: 
// 		echo "Результат: 1"; break;
// 	case 2: 
// 		echo "Результат: 2"; break;
// 	case 3: 
// 		echo "Результат: 3"; break;
// 	case 4: 
// 		echo "Результат: 4"; break;
// 	default: echo " Много";
// }

?>
<?php

// *******************************************************************************************************


/*----------Массив----------*/

// $arr1 = array();//для версий php до 5.4
// Чтобы назначить начало отсчета массива(по умолчанию с 0), используем =>
// Можем задать имя для элемента массива
// $arr = [
// 		10 =>"John",
// 		"root",
// 		5 =>"1234"
// 	];

// echo $arr[0];// вывести элемент по тегу
// echo $arr{0};
// echo count($arr);// вывести количество элементов в массиве

// $arr["age"] = 25; //Добавить элемент в конец массива
// $arr[] = true; // В массиве будет 1
// $arr[99] = false; //Сменится индекс, но длина увеличится на 1

// print_r($arr); //Вывести все элементы массива 

// var_dump($arr); // Вывести все элементы массива с более подробным описанием

// echo is_array($arr);

// unset($arr); //Удалить массив


/*----------Ассоциативный массив----------*/

// $user =[
// 	"name" => "John",
// 	"login" => "root",
// 	"password" => "1234",
// 	"age" => 25,
// 	true
// ];
// echo $user["name"]; //John
// echo $user[0]; //1



/*---------Многомерный массив----------*/

// $user[0] = [
// 	"login" => "john",
// 	"pass" => "1234"
// ];
// $user[1] = [
// 	"login" => "mike",
// 	"pass" => "5678"
// ];

// echo $user[1]["login"];
// var_dump ($user);


/*---------Языковая конструкция list()----------*/

// $info = array('кофе', 'коричневый', 'кофеин');

// // Составить список всех переменных
// list($drink, $color, $power) = $info;
// echo "$drink - $color, а $power делает его особенным.\n";

// // Составить список только некоторых из них
// list($drink, , $power) = $info;
// echo "В $drink есть $power.\n";

// // Или пропустить все, кроме третьей
// list( , , $power) = $info;
// echo "Мне нужен $power!\n";

// // list() не работает со строками
// list($bar) = "abcde";
// var_dump($bar); // NULL


?>

<?php
// *******************************************************************************************************


/*----------Циклы----------*/

/*----------Цикл for----------*/

// for ($i = 1; $i <= 10; $i++){
// 	echo $i;
// }

// for ($i = 1; $i <= 10; print $i++);

// for($i = 1; $i <= 50; $i++){
// 	if (($i % 2) == 1){
// 		echo $i."<br>";
// 	}
// }

// for ($i = 1; $i < 49; print ($i+=2)."<br>");


/*----------Цикл while----------*/

// $i = 1;
// while( $i <= 10 ){
// 	echo $i++;
// }


// $i = 0;
// $text = "Hello";
// $arr = [1,2,3,4,5];

// echo $arr[0];
// echo $arr{0};

// echo $text[0];

// $len = strlen($text);

// while ($i < $len){
// 	echo $text{$i}."<br>";
// 	$i++;
// }

// $lenarr = count($arr);
// while ($i < $lenarr){
// 	echo $arr{$i}."<br>";
// 	$i++;
// }


/*----------Цикл do-while----------*/

// Если нужно сделать хотя бы один раз
// $i = 100;

// do{
// 	echo $i++;
// }while ($i <= 10);


// *******************************************************************************************************


/*----------Управление циклами----------*/

/*----------Прерывание цикла----------*/

// Цикл прекращается, когда условие выполняется
// $i = 1;
// while ($i <= 10){
// 	echo $i++;
// 	if($i == 5)
// 		break;
// }


/*----------Продолжение цикла----------*/

// Когда условие выполняется, прекращается итерация и цикл выполняется дальше
// $i = 0;

// while ($i <9){
// 	$i++;
// 	if($i == 5)
// 		continue;
// 	echo $i;
// }


/*----------Вложенные циклы----------*/

// $i = 1;
// $j = 1;
// while($j <= 10){
// 	while ($i <= 10){
// 		echo $i++;
// 		if($i == 5)
// 			break 2;
// 	}
// 	$j++;
// }


/*----------Цикл foreach----------*/


// $arr = [
// 	"name" => "John",
// 	"login" => "root",
// 	"age" => 25
// ];

// foreach($arr as $val){
// 	echo $val."<br>";
// }

// foreach($arr as $key => $val){
// 	echo $key." : ".$val."<br>";
// }

// Ссылка на значение элемента массива
// $nums = [1,2,3,4,5];

// print_r($nums);

// foreach($nums as &$v){
// 	$v *=10;
// }
// // Переменная после завершения цикла содержит ссылку на последний элемент
// $v = 100;
// print_r($nums);


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// В двойных кавычках можно использовать индекс элемента массива двумя способами:
// 1. Указывая имя элемента массива без кавычек 
// 2. Оборачивая элемент в {}


/*----------Инвалидные аргументы----------*/

// $arr = [
// 	"name" => "John",
// 	"login" => "root",
// 	"age" => 25
// ];
// Если передать в цикл не массив, то в ошибке будет оповещение об инвалидном аргументе
// foreach ($arrs as $key=>$val){
// 	echo "$key : $val"
// }
?>
<?
// *******************************************************************************************************


/*----------Функции----------*/

// Нельзя два раза объявить функцию с одиннаковым названием
// function say(){
// 	echo "<h3>Hello!</h3>";
// }

// say();
// say();
// say();

// Функции, зависящие от условий
// $makefoo = true;
// if($makefoo){
// 	function foo(){
// 		echo "Hello world!";
// 	}
// 	foo();
// }

// Функция в функции
// функцию foo можно вызвать только один раз
// function foo(){
// 	function bar(){
// 		echo "Hello world!";
// 	}
// }

// foo();
// bar();



// function say($name="Guest", $h=3){
// 	echo "<h$h>Hello, $name!</h$h>";
// }

// say("John", 1);

// say($n);
// $str = 10;//"say";
// $str();


/*----------Область видимости----------*/

// Глобальная
// Локальная

// Способы использование переменной, введенной внутри функции
// 1. Объявить глобальную переменную
	// function say($name){
	// 	echo "<h1>Hello, $name!</h1>";//л
	// 	global $name;//Создает переменную, если ее нет, меняет значение, если она есть
	// 	$name = "Vasya";//л
	// }
	
	
	// say("John");//г
	// $name = "Mike";//г
	// say($name);//г
	// echo $name;//г

// 2.Объявить переменную через суперглобальный массив
	// $name = "John";//Объявили глобальную переменную 
	// $GLOBALS['name'] = "John";// тоже самое что в предыдущей строке


	// function say($name){
	// 	echo "<h1>Hello, $name!</h1>";
	// 	$GLOBALS['name'] = "Vasya";
	// }

// 3. Только переменные могут передаваться в функцию
	// function say(&$name){
	// 	echo "<h1>Hello, $name!</h1>";
	// 	$name = "Vasya";//здесь ссылка на переменную
	// }
	
	// $name = "Mike";
	// say($name);
	// echo $name;


// !!!!!!!!! Глобальные переменные не видны в локальной области видимости функции !!!!!!!!!


/*----------Статические переменные----------*/

// Чтобы переменная каждый раз не обновляла свое значение используем ключевое слово "static"
// 
// function foo(){
// 	static $x = 0;
// 	echo $x++;
// }

// foo();
// foo();
// foo();


/*----------Возвращаемые значения----------*/

// function sum($n1, $n2){
// 	return $n1 + $n2;
// }
// $result = sum(2,3);
// echo $result;




// Языковая конструкция list() используется, чтобы создать новые переменные из элементов массива
// function nums(){
// 	return[1, 2, 3];
// }
// list($one, $two, $three) = nums();
// echo $two;

// $arr = nums()[1];
// echo $arr;


// function nums($x, $y, &$a, &$b, &$c){
// 	$a =  $x * $y;
// 	$b =  $x / $y;
// 	$c =  $x - $y;

// 	return $x + $y;
// }
// $sum = nums(2, 3, $mult, $div, $sub);

// echo $sum, " ", $mult;


// Array => Кол-во элементов
// NULL => 0
// что-либо другое => 1



// Функция как count()

// $arr = [1, 2, 3];

// function my_count($var){
// 	if(gettype($var) == "array"):
// 		$i = 0;
// 		foreach($var as $val){
// 			$i++;
// 		}
// 		return $i;
// 	elseif(gettype($var) == "NULL"):
// 		return 0;
// 	else:
// 		return 1;
// 	endif;
// }
// echo my_count($arr);

// function my_count($var, $mode=0){
// 	if(is_null($var)) return 0;
// 	if(!is_array($var)) return 1;
// 	$cnt = 0;
// 	foreach($var as $v){
// 		if(is_array($v) and $mode){
// 			$cnt += my_count($v, 1);
// 		}
// 		$cnt++;
// 	}
// 	return $cnt;
// }


// Работа с аргументами функции
// function foo(){
// 	echo func_num_args();
// 	print_r(func_get_args());
// 	echo func_get_arg(2);
// }
// foo(1, 2, 3, 4, 5);



// Функция принимает только данные в виде массива
// function foo(array $param){}
// foo([]);

// Функция принимает то, что можно вызвать(функция)
// function bar($p){}
// function test(callable $param, $x){
// 	$param($x);
// }
// test("bar", 10);

// Количество встроенных функций
// print_r(get_defined_functions());
?>
<?
// *******************************************************************************************************


/*----------Встроенные функции----------*/

// Функция возвращает дату в виде массива
// print_r(getdate(1111111111));
// echo time();//возвращает текущую метку времени

// $x = mktime(0, 0, 0 ,13 ,1, 2014);//метка времени по определенной дате

// print_r(getdate($x));


// echo strftime("%d - %Y", 1234567890 );//отформатированная дата по метки времени

// echo date("d-m-Y H:i:s");//не работает с locale


/*----------Языковые конструкции----------*/

// Разница между ЯК и функцией
// 1. При использовании языковых конструкций не обязательно использовать скобки "()"
// 2. Языковые конструкции нельзя присваивать переменным


// echo vs print
// 1.echo может принимать несколько параметров(если используется без скобок)
// 2.print возвращает 1. echo ничего не возвращает


/*----------Псевдоконстанты----------*/

// Псевдокнстанты обособляются двумя "__" с обоих сторон
// Значения псевдоконстант можно менять

// Возвращает имя функции в которой она находится
// function foo(){
// 	echo __FUNCTION__;
// }
// foo();

// Список всех встроенных констант
// print_r(get_defined_constants(true));


/*----------Суперглобальные переменные----------*/

// GLOBALS - суперглобальный массив
// print_r($GLOBALS);

// $_ENV - информаци об операционной системе

// $_SERVER - информация о сервере

// $_COOKIE - информация о куках

// $_SESSION - информация о сессии

// $_FILES - информация о файлах

?>
<?
// *******************************************************************************************************


/*----------Подключение файлов----------*/

?>
<!-- <h1>BEFORE</h1> -->
<?
// error_reporting(0);
// Можно задать параметр, чтобы не было ошибок в редикларированием функции во избежания ошибок 
// include_once "test.ink.php";//ошибка не критичная если файл не найден
// require "test.ink.php";//Выдает фатальную ошибку, если файл не найден
?>
<!-- <h1>AFTER</h1> -->
<?

// *******************************************************************************************************

 
// Отличие GET запроса от POST запроса


 // При GET запросе все отправленные данные передаются в строку ссылки (GET /action.php?login=John&pwd=1234 HTTP/1.1 ... )


// При POST запросе в ссылку передается только (POST /action.php HTTP/1.1)
// , кроме того передается Referer - в котором указывается ссылка отправителя, Content-Type - тип передаваемой информации, Content-length - длина передаваемой информации
// У метода POST есть тело, в котором указывается вся переданная информация


/*----------Прием и обработка данных----------*/

// Прием параметров QueryString
// Необходимо пропустить информацию через проверки
// echo $_GET['name'];
// echo $_GET['age'];

// Прием параметров из тела запроса и их фильтрация
// trim - убирает пробелы
// strim_tags - убирает все теги 
// $name = trim(string_tags($_POST['name']));
// $age = (ing) $_POST['age'];


// echo "<p> Ваше имя $name </p>";
// echo "<p> Вам $age лет </p>";


// **** Метод GET лучше всего использовать только для поиска по сайту


// Определение метода запроса
// if($_SERVER['REQUEST_METHOD'] == 'POST' )
	// echo "Данные переданы методом POST"; 










?>









































</body>
</html>